error fixes:

KeyError: 'url_encoded_fmt_stream_map' and KeyError: 'url'

A biblioteca pytube pode sofrer alteraçoes no seu fincionamento de acordo com a interaçao do YouTube.
Assim deve ser constantemente verificada e atualizada.

O  Erro KeyError: 'url_encoded_fmt_stream_map' pode ocorrer deviso a modificaçoes da parte do Youtube
epode ser corrigido dentro da biblioteca pytube: Em mixins.py subistitua a função apply_descrambler por:

if key == 'url_encoded_fmt_stream_map' and not stream_data.get('url_encoded_fmt_stream_map'):
        formats = json.loads(stream_data['player_response'])['streamingData']['formats']
        formats.extend(json.loads(stream_data['player_response'])['streamingData']['adaptiveFormats'])
        stream_data[key] = [{u'url': format_item[u'url'],
                             u'type': format_item[u'mimeType'],
                             u'quality': format_item[u'quality'],
                             u'itag': format_item[u'itag']} for format_item in formats]
    else:
        stream_data[key] = [
            {k: unquote(v) for k, v in parse_qsl(i)}
            for i in stream_data[key].split(',')
        ]
    logger.debug(
        'applying descrambler\n%s',
        pprint.pformat(stream_data[key], indent=2),
    )
    
 O Erro KeyError: 'url' poder ser solucionado no mesmo metodo acima com a seguinte modificaçao:
    
import urllib.parse
    
    
if key == 'url_encoded_fmt_stream_map' and not stream_data.get('url_encoded_fmt_stream_map'):
        formats = json.loads(stream_data['player_response'])['streamingData']['formats']
        formats.extend(json.loads(stream_data['player_response'])['streamingData']['adaptiveFormats'])
        try:
            stream_data[key] = [{u'url': format_item[u'url'],
                                 u'type': format_item[u'mimeType'],
                                 u'quality': format_item[u'quality'],
                                 u'itag': format_item[u'itag']} for format_item in formats]
        except:
            stream_data[key] = [{u'url': urllib.parse.unquote([url_item for url_item in format_item[u'cipher'].split("&") if "url=" in url_item][0].split("=")[1]),
                                  u'sp': urllib.parse.unquote([url_item for url_item in format_item[u'cipher'].split("&") if "sp=" in url_item][0].split("=")[1]),
                                  u's': urllib.parse.unquote([url_item for url_item in format_item[u'cipher'].split("&") if "s=" in url_item][0].split("=")[1]),
                                  u'type': format_item[u'mimeType'],
                                  u'quality': format_item[u'quality'],
                                  u'itag': format_item[u'itag']} for format_item in formats]
    else:
        stream_data[key] = [
            {k: unquote(v) for k, v in parse_qsl(i)}
            for i in stream_data[key].split(',')
        ]
    logger.debug(
        'applying descrambler\n%s',
        pprint.pformat(stream_data[key], indent=2),
    )
    
    O DEBATE COMPLETO SOBRE ERROS DESSA ORIGEM PODE SER ENCONTRADO: https://github.com/nficano/pytube/issues/467
    
